name: Spring Boot CI/CD Pipeline

on:
  push:
    branches:
      - demo1
  pull_request:
    branches:
      - demo1

jobs:     
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # You can use temurin, zulu, etc.
          java-version: '17'        # Use the JDK version compatible with Spring Boot project
          
      - name: Verify Java version
        run: java -version  # Check Java version to ensure it's 17
        
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install -DskipTests=true

      - name: Run Tests
        run: mvn test

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Install Maven 3.8.1
        run: |
          curl -sL https://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz | tar xz
          sudo mv apache-maven-3.8.1 /opt/maven
          sudo ln -s /opt/maven/bin/mvn /usr/local/bin/mvn

      - name: Build the project with Maven
        run: |
          mvn clean install

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/cs203-app:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/cs203-app:latest

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # PLEASE WORK
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # Pull the latest code (or use scp to copy it over)
            cd ~/app
            git pull origin main

            # Build and run the application
            # Example for Docker:
            docker build -t cs203-app .
            docker stop cs203-app || true
            docker rm cs203-app || true
            docker run -d --name cs203-app -p 80:80 cs203-app
          EOF
